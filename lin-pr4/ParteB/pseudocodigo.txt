mutex mtx;
condvar prod,cons;
int prod_count=0,cons_count=0;
struct kfifo cbuffer;

void fifoproc_open(bool abre_para_lectura) { /*reparar*/
        lock(mtx);
    
    if(abre_para_lectura) { // Lectores (consumidores)
        cons_count++;
		cond_signal(prod);//despierta a los productores(hay un consumidor en la cola)
        while(prod_count < 1) {
        	cond_wait(cons,mtx);//esperar hasta que entre un productor
        }

        unlock(mtx);
    } else { // Escritores (productores)

        prod_count++;
		cond_signal(cons);//despierta a los consumidores(hay un productor en la cola)
        while(cons_count < 1) {
			cond_wait(prod,mtx); // esperar hasta que entre un consumidor
        }


   }
	unlock(mtx);
}

int fifoproc_write(char* buff, int len) {
    char kbuffer[MAX_KBUF];
    if (len> MAX_CBUFFER_LEN || len> MAX_KBUF) { return Error;}
    if (copy_from_user(kbuffer,buff,len)) { return Error;}
    lock(mtx);
    /* Esperar hasta que haya hueco para insertar (debe haber consumidores) */
    while (kfifo_avail(&cbuffer)<len && cons_count>0){
        cond_wait(prod,mtx);
    }
    /* Detectar fin de comunicación por error (consumidor cierra FIFO antes) */
    if (cons_count==0) {unlock(mtx); return -EPIPE;}
    kfifo_in(&cbuffer,kbuffer,len);
    /* Despertar a posible consumidor bloqueado */
    cond_signal(cons);
    unlock(mtx);
    return len;
}


int fifoproc_read(const char* buff, int len) {
    char kbuffer[MAX_KBUF];
    if (len > MAX_CBUFFER_LEN || len > MAX_KBUF) { return Error;}
    lock(mtx);
    /* Esperar hasta que haya elementos para consumir (debe haber productores) */
    while (kfifo_len(&cbuffer)<len && prod_count>0){
        cond_wait(cons,mtx);
    }
    /* Detectar fin de comunicación por error (consumidor cierra FIFO antes) */
    if (prod_count==0 && kfifo_is_empty(&cbuffer)) {unlock(mtx); return 0;}
    /* Hay que ver si hay mas panes de los que puedo coger o menos*/
    /* El unico caso a tratar es cuando la bolsa de la señora es mas grande que lo que hay*/
    kfifo_out(&cbuffer,kbuffer,len);
    /* Despertar a posible consumidor bloqueado */
    cond_signal(cons);
    unlock(mtx);
    if (copy_to_user(buff,kbuffer,len)) { return Error;}
    return len;
}


void fifoproc_release(bool lectura) {
	lock(mtx);
	if(lectura) { // Lectores (consumidores)
		cons_count--;
		cond_signal(prod);
    } else { // Escritores (productores)
        prod_count--;
		cond_signal(cons);
    }

	if(prod_count == 0 && cons_count == 0) 
		kfifo_reset(cbuffer);
	unlock(mtx);
}


